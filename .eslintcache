[{"/Users/andrewczeropski/react-calc-app/src/index.js":"1","/Users/andrewczeropski/react-calc-app/src/reportWebVitals.js":"2","/Users/andrewczeropski/react-calc-app/src/App.js":"3","/Users/andrewczeropski/react-calc-app/src/components/Calculator.js":"4","/Users/andrewczeropski/react-calc-app/src/components/CalculatorButton.js":"5"},{"size":359,"mtime":1610142349282,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610072931944,"results":"8","hashOfConfig":"7"},{"size":212,"mtime":1610401869420,"results":"9","hashOfConfig":"7"},{"size":5710,"mtime":1610404595146,"results":"10","hashOfConfig":"7"},{"size":293,"mtime":1610143027797,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"l10rxi",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/andrewczeropski/react-calc-app/src/index.js",[],["26","27"],"/Users/andrewczeropski/react-calc-app/src/reportWebVitals.js",[],["28","29"],"/Users/andrewczeropski/react-calc-app/src/App.js",[],"/Users/andrewczeropski/react-calc-app/src/components/Calculator.js",["30","31"],"import React, { useState } from \"react\";\nimport CalculatorButton from \"./CalculatorButton\";\nimport \"./Calculator.css\";\n\n// Use 'eval()' function that accepts string of characters and outputs value\n\nfunction Calculator() {\n  const [formula, setFormula] = useState(\"\");\n  const [output, setOutput] = useState(\"0\");\n  const [prevInput, setPrev] = useState(\"\");\n\n  //useEffect(() => {}, [formula, output, prevInput, setNext]);\n\n  // Handles all click events and routes to correct event handler\n  const handleClick = (value) => {\n    if (\n      [\"/\", \"x\", \"*\", \"+\", \"-\"].includes(value) &&\n      [\"/\", \"x\", \"*\", \"+\", \"-\"].includes(prevInput)\n    ) {\n      handleOperations(value);\n    } else if (value === \"=\") {\n      equalClick();\n    } else if (value === \"AC\") {\n      clearClick();\n    } else {\n      if (value === \"x\") {\n        value = \"*\";\n      }\n      handleFormula(value);\n    }\n  };\n\n  // Handles setting formula if no operations take place\n  const handleFormula = (value) => {\n    setFormula(formula.concat(value));\n    setPrev(value);\n  };\n\n  // Handles operations and logic of switching operations if two are clicked in a row\n  const handleOperations = (value) => {\n    if (value === \"x\") {\n      value = \"*\";\n    }\n    // Lets the calculator handle squaring numbers\n    if (prevInput === \"*\" && value === \"*\" && !formula.includes([\"**\"])) {\n      handleFormula(value);\n    }\n    // Lets the calculator handle changing of signs from ** to [+,/]\n    else if (\n      formula.slice(-2).includes([\"**\"]) &&\n      (value === \"/\") | (value === \"+\") | (value === \"-\")\n    ) {\n      setFormula(formula.slice(0, -2).concat(value));\n      setPrev(value);\n    }\n    // Handles adding a negative number\n    else if (\n      (prevInput === \"+\" && value === \"-\") |\n      (prevInput === \"*\" && value === \"-\")\n    ) {\n      handleFormula(value);\n    }\n    // Switches to new operator if two are pressed in a row\n    else {\n      setFormula(formula.slice(0, -1).concat(value));\n      setPrev(value);\n    }\n  };\n\n  // Handles clicking the equal button\n  const equalClick = () => {\n    try {\n      setFormula(formula);\n      setOutput(eval(formula));\n      setFormula(eval(formula).toString());\n      setPrev(\"=\");\n    } catch {\n      nanClick();\n    }\n  };\n\n  // If the user tries to input an open ended operation ie. '9+'.\n  const nanClick = () => {\n    setFormula(\"\");\n    setOutput(\"NaN\");\n    setPrev(\"\");\n  };\n\n  // Handles clicking the clear/AC button\n  const clearClick = () => {\n    setFormula(\"\");\n    setOutput(\"0\");\n    setPrev(\"\");\n  };\n\n  return (\n    <div id=\"app\">\n      <div className=\"calc-container\">\n        <div className=\"formula-screen\">{formula}</div>\n        <div className=\"output-screen\">{output}</div>\n        <div className=\"button-container\">\n          <CalculatorButton\n            id=\"clear\"\n            value={\"AC\"}\n            className=\"AC\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"divide\"\n            value={\"/\"}\n            className=\"divide\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"times\"\n            value={\"x\"}\n            className=\"times\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"seven\"\n            value={\"7\"}\n            className=\"seven\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"eight\"\n            value={\"8\"}\n            className=\"eight\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"nine\"\n            value={\"9\"}\n            className=\"nine\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"minus\"\n            value={\"-\"}\n            className=\"minus\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"four\"\n            value={\"4\"}\n            className=\"four\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"five\"\n            value={\"5\"}\n            className=\"five\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"six\"\n            value={\"6\"}\n            className=\"six\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"plus\"\n            value={\"+\"}\n            className=\"plus\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"one\"\n            value={\"1\"}\n            className=\"one\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"two\"\n            value={\"2\"}\n            className=\"two\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"three\"\n            value={\"3\"}\n            className=\"three\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"zero\"\n            value={\"0\"}\n            className=\"zero\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"decimal\"\n            value={\".\"}\n            className=\"decimal\"\n            onClick={handleClick}\n          ></CalculatorButton>\n          <CalculatorButton\n            id=\"equals\"\n            value={\"=\"}\n            className=\"equals\"\n            onClick={handleClick}\n          ></CalculatorButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Calculator;\n","/Users/andrewczeropski/react-calc-app/src/components/CalculatorButton.js",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"38"},{"ruleId":"36","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":74,"column":17,"nodeType":"42","messageId":"43","endLine":74,"endColumn":21},{"ruleId":"40","severity":1,"message":"41","line":75,"column":18,"nodeType":"42","messageId":"43","endLine":75,"endColumn":22},{"ruleId":"34","replacedBy":"44"},{"ruleId":"36","replacedBy":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],["46"],["47"],"no-eval","eval can be harmful.","CallExpression","unexpected",["46"],["47"],"no-global-assign","no-unsafe-negation"]